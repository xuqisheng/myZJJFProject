<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.corner.kefu.dao.AuthMgMapper" >
	<resultMap id="BaseResultMap" type="com.corner.kefu.beans.vo.AuthVo" extends="com.corner.core.dao.AuthMapper.BaseResultMap">
		<collection property="auths" ofType="com.corner.core.beans.Auth" >
		    <id column="id2" property="id" jdbcType="VARCHAR" />
		    <result column="authString2" property="authString" jdbcType="VARCHAR" />
		    <result column="authName2" property="authName" jdbcType="VARCHAR" />
		    <result column="icon2" property="icon" jdbcType="VARCHAR" />
		    <result column="action2" property="action" jdbcType="VARCHAR" />
		    <result column="ordId2" property="ordId" jdbcType="INTEGER" />
		    <result column="upId2" property="upId" jdbcType="VARCHAR" />
		    <result column="roleRemark2" property="roleRemark" jdbcType="VARCHAR" />
		    <result column="createTime2" property="createTime" jdbcType="TIMESTAMP" />
		    <result column="createUser2" property="createUser" jdbcType="VARCHAR" />
		    <result column="appId2" property="appId" jdbcType="TINYINT" />
		    <result column="position2" property="position" jdbcType="TINYINT" />
		    <result column="type2" property="type" jdbcType="TINYINT" />
		    <result column="level2" property="level" jdbcType="TINYINT" />
		    <result column="status2" property="status" jdbcType="TINYINT" />
		    <result column="isDelete2" property="isDelete" jdbcType="BIT" />
	    </collection>
	</resultMap>
	<!-- 通过用户角色查出用户的菜单权限 -->
	<select id="getAuthByAppIdOrRoleId" parameterType="java.util.Map" resultMap="BaseResultMap">
		SELECT
		a.id id,
		a.authName authName,
		a.type AS type,
		a.upId upId,
		a.action,
		a.icon,
		a.ordId,
		a.`level` AS LEVEL,
		b.`level` AS level2,
		b.id AS id2,
		b.authName AS authName2,
		b.upId AS upId2,
		b.type AS type2,
		b.action action2,
		b.icon icon2,
		b.ordId ordId2
		FROM
		(
		SELECT
		a.id id,
		a.authName authName,
		a.type AS type,
		a.upId upId,
		a.action,
		a.`level` AS LEVEL,
		a.icon,
		a.ordId,
		b.roleId,
		a.appId
		FROM
		Auth a
		LEFT JOIN RoleAuthMap b ON a.id = b.authId
		WHERE
		a.`level` = 1
		AND a.isDelete = 0
		AND `status` = 1
		<if test="userId != null and userId != ''">
		AND b.roleId in (SELECT roleId from UserRoleMap where userId in(SELECT id from CustomerService where isDelete = 0 and `status` = 2 and id=#{userId}))
		</if>
		) a
		LEFT JOIN (
		SELECT
		a.id id,
		a.authName authName,
		a.type AS type,
		a.upId upId,
		a.action,
		a.`level` AS LEVEL,
		a.icon,
		a.ordId,
		b.roleId,
		a.appId
		FROM
		Auth a
		LEFT JOIN RoleAuthMap b ON a.id = b.authId
		WHERE
		a.`level` = 2
		AND a.isDelete = 0
		AND `status` = 1
		<if test="userId != null and userId != ''">
		AND b.roleId in (SELECT roleId from UserRoleMap where userId in(SELECT id from CustomerService where isDelete = 0 and `status` = 2 and id=#{userId}))
		</if>
		) b ON a.id = b.upId
		WHERE
		1 = 1
		<if test="appId != null and appId != ''"> and (a.appId =  #{appId} or b.appId = #{appId})</if>
		ORDER BY
		a.ordId,
		a.id,
		b.ordId ASC;
	</select>
</mapper>